---

# Set the proposed new hostname, based on the prefix and the pi's
# position in the group in `hosts` file.
- name: Set a new hostname variable based on a prefix + index num in hosts group
  set_fact:
      new_hostname: "{{ new_hostname_prefix }}{{ groups.pis.index(inventory_hostname) }}"
  when: change_hostname == true

- debug: msg="{{ new_hostname }}"

# Change the hostname of the pi
- name: Change the hostname on the pi
  hostname: name="{{ new_hostname }}"
  when: change_hostname == true

# Get the current hostname
- name: Get the current hostname (from the host itself)
  shell: hostname
  register: current_hostname
  when: change_hostname == false

- name: Set new_hostname based on current hostname
  set_fact:
      new_hostname: current_hostname
  when: change_hostname == false

# Always comment out the old host in the ansible hosts file
- name: Comment existing IP/hostname
  local_action: lineinfile dest=hosts regexp="^{{ inventory_hostname }}" insertafter="[pis]" line="#{{ inventory_hostname }} \# Old hostname or IP."
  sudo: false   # because we're doing a local action.

# Write the hostname (either system one or user provided) to the ansible inventory file
- name: Write new hostname into hosts file
  local_action: lineinfile dest=hosts regexp="^{{ new_hostname }}.local" insertafter="[pis]" line="{{ new_hostname }}.local"
  sudo: false   # because we're doing a local action.

- set_fact:
    eth0_ip: "{{ hostvars[inventory_hostname]['ansible_eth0']['ipv4']['address'] }}"

- set_fact:
    wlan0_ip: "{{ hostvars[inventory_hostname]['ansible_wlan0']['ipv4']['address'] }}"
  ignore_errors: true

- name: Print new hostname.
  debug: msg="*** You have changed the hostname to {{ new_hostname }} ***"

# Print a debug and then notify the top-level handler
- name: Print Ethernet IP address.
  debug: msg="*** {{ new_hostname }} has Ethernet IP {{ eth0_ip }} ***"
  when: eth0_ip is defined

- name: Print wifi IP address for benefit of user.
  debug: msg="*** {{ new_hostname }} has Wifi IP {{ wlan0_ip }} ***"
  when: wlan0_ip is defined

- name: Rebooting host after hostname change.
  debug: msg="*** Rebooting host after hostname change ***"
  notify:
    - reboot
    - wait for reboot

- name: Check hostname after reboot
  shell: hostname
  register: new_changed_hostname

- debug: msg="New hostname after reboot {{ new_changed_hostname }}"








# Could not get the connection to be remade. The host comes back up, but it isn't available via wait_for

#- name: waiting for server to come back
#  local_action: wait_for host={{ ansible_ssh_host | default(inventory_hostname) }} state=started
#  sudo: false

# Useful debug calls:
#- debug: "var=hostvars"
#- debug: "var=inventory_hostname"
#- debug: "var=current_hostname"
